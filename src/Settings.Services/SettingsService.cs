using System;
using System.Collections.Generic;
using System.Linq;
using Newtonsoft.Json.Linq;
using Settings.Common.Domain;
using Settings.Common.Interfaces;
using Settings.Common.Models;
using Settings.DataAccess;

namespace Settings.Services
{
    public class SettingsService : ISettingsService
    {
        protected readonly ISettingsDbContext _context;
        protected readonly ISettingsProcessor _settingsProcessor;

        protected Queries _queries { get; }

        public SettingsService(ISettingsDbContext context, ISettingsProcessor settingsProcessor, Queries queries)
        {
            _context = context;
            _settingsProcessor = settingsProcessor;
            _queries = queries;
        }
        //TODO: Look at queries generated by this statment.  Something seems off about them
        //but it could just be that its not spitting out the whole thing to the console.
        public IEnumerable<SettingReadModel> GetApplicationEnvironmentSettings(string applicationName, 
            string environmentName)
        {
            var appHierarchyModel = _queries.LoadApplicationAndItsAncestorsByName(applicationName);
            var envHierarchyModel = _queries.LoadEnvironmentAndItsAncestorsByName(environmentName);

            if (appHierarchyModel == null || envHierarchyModel == null)
            {
                // todo: better way to handle? 
                return null;
            }

            var appAndAncestorIds = appHierarchyModel.GetIdsOfSelfAndAncestors();
            var envAndAncestorIds = envHierarchyModel.GetIdsOfSelfAndAncestors();

            var flattennedAppAncestors = appHierarchyModel.FlattenAncestors();
            var flattennedEnvAncestors = envHierarchyModel.FlattenAncestors();

            var appEnvSettingsQuery = from app in _context.Applications
                    join setting in _context.Settings 
                        on app.Id equals setting.ApplicationId
                    join env in _context.Environments 
                        on setting.EnvironmentId equals env.Id
                    where appAndAncestorIds.Contains(setting.ApplicationId)
                        && envAndAncestorIds.Contains(setting.EnvironmentId)
                    select new ApplicationEnvironmentSettings
                        {
                            ApplicationId = app.Id,
                            ApplicationName = app.Name,
                            EnvironmentId = env.Id,
                            EnvironmentName = env.Name,
                            ConfigurationJson = setting.Contents
                        };

            var appSettingsList = appEnvSettingsQuery.ToList();
            var appEnvSettingsList = (from setting in appSettingsList
                    join app in flattennedAppAncestors 
                        on setting.ApplicationId equals app.Id
                    join env in flattennedEnvAncestors
                        on setting.EnvironmentId equals env.Id
                    select new ApplicationEnvironmentSettings { 
                        ApplicationId = setting.ApplicationId,
                        ApplicationName = setting.ApplicationName,
                        EnvironmentId = setting.EnvironmentId,
                        EnvironmentName = setting.EnvironmentName,
                        ConfigurationJson = setting.ConfigurationJson,
                        ApplicationDepth = app.Depth,
                        EnvironmentDepth = env.Depth
                    })
                    .ToList()
                    .OrderBy(x => x.ApplicationDepth)
                    .ThenBy(x => x.EnvironmentDepth);

            if (!appEnvSettingsList.Any())
            {
                return Enumerable.Empty<SettingReadModel>();
            }

            return _settingsProcessor.CalculateEnvironmentSettings(appEnvSettingsList, applicationName, environmentName);
        }

        public void CreateOrEditSettings(string applicationName, string environmentName, SettingsWriteModel writeModel)
        {
            var app = _context.Applications.FirstOrDefault(x => x.Name == applicationName);
            var env = _context.Environments.FirstOrDefault(x => x.Name == environmentName);

            var settingsEntry = _context.Settings.FirstOrDefault(x => x.EnvironmentId == env.Id
                                                                 && x.ApplicationId == app.Id);

            if (settingsEntry == null)
            {
                settingsEntry = new Setting
                {
                    EnvironmentId = env.Id,
                    ApplicationId = app.Id,
                    Contents = "{}"
                };
            }

            var settingsObj = JObject.Parse(settingsEntry.Contents);

            foreach (var settingEntry in writeModel.SettingsToUpdate)
            {
                settingsObj[settingEntry.Name] = settingEntry.Value;
            }
            settingsEntry.Contents = settingsObj.ToString();
            //todo: This is ugly, revise
            if (settingsEntry.Id == 0)
            {
                _context.AddEntity(settingsEntry);
            }
            _context.SaveChanges();

        }
    }
}
